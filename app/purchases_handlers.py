from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery

from app.payment import create, check

import app.keyboards as kb
import database.requests as rq
import app.texts as txts

from datetime import datetime

import os
import logging

purchases_router = Router()

@purchases_router.callback_query(F.data.startswith('prolong_'))
async def process_callback_query(callback: CallbackQuery, bot: Bot):
    try:
        action = callback.data[8:]
        description = ''
        text = ''
        amount_for_kb = ''
        days_number = 0
        payment_url, payment_id, uuid = None, None, None
        if action == '1_month':
            description = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π'
            text = txts.prolong_subscription('30', '99')
            # text = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π, 99 RUB\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üîé"'
            payment_url, payment_id, uuid = create('99.00', callback.message.chat.id, description)
            amount_for_kb = '99'
            days_number = 30
        elif action == '2_month':
            description = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 60 –¥–Ω–µ–π'
            text = txts.prolong_subscription('60', '180')
            # text = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 60 –¥–Ω–µ–π, 180 RUB\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üîé"'
            payment_url, payment_id, uuid = create('180.00', callback.message.chat.id, description)
            amount_for_kb = '180'
            days_number = 60
        elif action == '3_month':
            description = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 90 –¥–Ω–µ–π'
            text = txts.prolong_subscription('90', '250')
            # text = '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 90 –¥–Ω–µ–π, 250 RUB\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üîé"'
            payment_url, payment_id, uuid = create('250.00', callback.message.chat.id, description)
            amount_for_kb = '250'
            days_number = 90
        # elif action == 'monthly':
        #     description = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
        #     text = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
        #     payment_url, payment_id = create('80.00', callback.message.chat.id, description)
        
        await rq.add_payment(
            user_chat_id=callback.message.chat.id,
            uuid=uuid,
            amount=int(amount_for_kb),
            payment_id=payment_id,
            description=description,
            days_number=days_number
        )

        await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            parse_mode='HTML',
            reply_markup=await kb.payment_kb(payment_url, payment_id, amount_for_kb)
        )

    except Exception as e:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text='‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.',
            reply_markup=kb.delete_this_message
        )
        await bot.send_message(
            chat_id=os.getenv('ADMIN_CHAT_ID'),
            text=f'–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è chat_id: {callback.message.chat.id}, username: {callback.message.from_user.username}, –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}:\n\n{e}.',
            disable_notification=True
        )
        logging.exception(e)


@purchases_router.callback_query(F.data.startswith('check_payment_'))
async def check_handler(callback: CallbackQuery, bot: Bot):
    try:
        payment_id = callback.data[14:]
        result = check(payment_id)
        if result:
            text = await rq.payment_is_successed(callback.message.chat.id, payment_id)
            if text:
                await bot.edit_message_text(
                    text=text,
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    reply_markup=kb.delete_this_message
                )
            else:
                await callback.message.answer(
                    text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑.',
                    reply_markup=kb.delete_this_message
                )
            # await rq.prolong_subscription(callback.message.chat.id, payment_id)
        else:
            await callback.message.answer(
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑.',
                reply_markup=kb.delete_this_message
                )
    except Exception as e:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text='‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.',
            reply_markup=kb.delete_this_message
        )
        await bot.send_message(
            chat_id=os.getenv('ADMIN_CHAT_ID'),
            text=f'–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è chat_id: {callback.message.chat.id}, username: {callback.message.from_user.username}, –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y, %H:%M:%S')}:\n\n{e}.',
            disable_notification=True
        )
        logging.exception(e)